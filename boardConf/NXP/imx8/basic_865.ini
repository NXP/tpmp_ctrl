[DEFAULT]
tempPeltier = 25
# Used to speed up convergence on die temp characterized delta for temp above limitLowHigh (optional)[TEMPBENCH]
deltaTargetHigh = 0
# Used to speed up convergence on die temp characterized delta for temp below limitLowHigh(optional)[TEMPBENCH]
deltaTargetLow = -1
# Frontier between low temp and high temp (optional based on charac)[TEMPBENCH]
limitLowHigh = 60
# powercycle after each test. Recomended if no issue with reboot in temp range and no test duration constraints[TESTS]
rebootAfterEachTest = False
# Force power cycle when test issue is detected by framework[TESTS]
rebootOnFailure = True
# (optional)[TEMPBENCH]
rebootAfterWarmUp = True
# warm-up is temp convergence before launching the first test(optional)[TEMPBENCH]
warmUpAuto = False
# if reboot is trigged at higher temperature, framework will lower temp before reboot and restore temp after
maxBootTemp = 80
# tempbench will converge to this temperature when tests are completed
safeTemp = 25
# guardband
maxPeltierTemp = 143
# copy test files at first boot up (cpdir)
prepareBoard = True
# True: script exit at end False: script in interactive mode and test end
exitOnLauncherEnd = False
# True: Fine tune temperature at begining of each test/False: temp not controlled or set only at warm-up[TEMPBENCH]
tempFineTune = False
# To disable tempcontrol for running test suite without temp bench remove/comment tempDieTarget

[TEMPBENCH]
# path to meerstetter python lib
pyMeComPath = ./lib/meerstetter/pyMeCom/
# id for Meerstetter Peltier controller
peltier_serial_hwid = 0403:6015
#tempTarget = 30
deltaTargetHigh = 10
deltaTargetLow = 4
limitLowHigh = 60
#warmUpAuto = True
# launch this test for warmup (optional)
warmUpTest = warmuptest.sh
# target die temperature for testing if commented out, test launcher will execute tests wo tempcontrol
tempDieTarget = 25
#tempDieTarget = 95
#tempDieTarget = 105
# True: Fine tune temperature at begining of each test
tempFineTune = true
# tempFineTune duration before delta temp is measured for correction in seconds
TFTRamp = 20
# tempFineTune total duration in seconds
TFTDuration = 50
# in case some tests needs larger duration than normal for convergence:
# Warning this is just used for timeout calculation this needs to be consistent with shell script if used
TFTMultiplier = 2


[TESTBOARD]
# id for board connected through serial
board_serial_hwid = 0403:6011
board_serial_port = 3
# serial baud rate
baud = 115200
boardConnectPattern = /unit_tests/autotest#
# recomended zmodem (needs to be installed on target) otherwise txtCopy (No sw needed on target but limited to txt files only, no binary and no integrity check)
copyMethod = zmodem
;copyMethod = txtCopy
# pattern detected at board boot up to enter login pwd
#loginvite = mevk login
loginvite = login
# root pwd
boardpwd = root
ttydev = ttymxc1

[TESTS]
# test timeout in sec
#testTO = 250
testTO = 60
# basic: pseudo terminal full support mini: real terminal miniterm customized limitted usage testLauncher cannot be used for now.
termType = basic
# Force board pwrcycle at testLauncher start-up
bootBoardInit = True
#bootBoardInit = False
#testDuration = 80
# test duration sec (wo temp fine tune duration)
testDuration = 60
#probeDuration = 60
# ACME capture probe duration sec
probeDuration = 30
#testList = ["coremarkRef_time.sh", "coremark1Core_time.sh", "coremark2Core_time.sh", "coremark3Core_time.sh", "gls_optical_time.sh", "gls_buildings_time.sh", "gls_boxfold_time.sh", "gls_pacman_time.sh", "gls_bouncingspheres_time.sh", "gls_flags_time.sh"]
#testList = ["coremark1Core-dbg_time.sh", "coremark1Core-dbg2_time.sh"]
#testList = ["coremark1Core-dbg_time.sh"]
#testList = ["coremarkRef_time.sh", "c-ray_time.sh",  "memset_time.sh"]
testList = ["coremark_short.sh"]

prepareBoard = False
# True: use pyacmegraph interface, no report generation, False: use pyacmecapture with full report generation and logs.
acmegraph = True
#VBacmegraph = False
# used to power cycle board
#VBacmecliPath = /home/nxf44606/Baylibre/ACME/CLI/acme-cli/
acmecliPath = /home/nxa22168/datas/projects/acme/acme-cli/
# acme name in /etc/hostname
#VBacmeName = baylibre-acme-ptec-jn.local
acmeName = baylibre-acme.local
#change with path of pyacmegraph.py on host (used only when acmegraph = True)
#VBpyacmegraphCmd = /home/nxf44606/Baylibre/ACME/GRAPH/pyacmegraph/pyacmegraph.py
pyacmegraphCmd = /home/nxa22168/datas/projects/acme/pyacmegraph/pyacmegraph.py
#change with path of template file .acme
#VBpyacmegraphTemplate = /home/nxf44606/Baylibre/ACME/GRAPH/pyacmegraph/config/VDD12345678NXP.acme
pyacmegraphTemplate = /home/nxa22168/datas/projects/acme/pyacmegraph/mek8qm12rails.acme
#Force shunt values (might not be needed any longer with latest acme sw revision)
#VBpyacmegraphShunt = --shunts=10,10,20,50,50,50,50,50
pyacmegraphShunt = --shunts=50,20,5,20,50,50,5,5,50,50,50,500
# directory to store logFiles on target
logFilesPath = ./logFiles/
# location of test files on target. path related to boardConnectPattern
testPath = ./
#testPath = /home/root/
# path to pyacmecapture used to probe power
pyacmecapturePath = /home/nxf44606/Baylibre/ACME/CAPTURE_CSV/acme-utils/pyacmecapture/
#Power rails in same order as probe connection
#probeList = ["VBAT","VDD_ARM","VDD_SOC","VDD_DRAM","NVCC_DRAM","VDD_1V8","GPU","VPU"]
#probeList = ["VDD_ARM","VDD_SOC","VDD_GPU","VDD_VPU" ,"VDD_DRAM","NVCC_DRAM"]
#VBprobeList = ["VBAT", "VDD_ARM","VDD_SOC","VDD_GPU","VDD_VPU" ,"VDD_DRAM","NVCC_DRAM"]
probeList = ["VCC_MAIN", "VCC_CPU0", "VCC_CPU1", "VCC_MEMC", "VCC_DDRIO0", "VCC_DDRIO1", "VCC_GPU0", "VCC_GPU1", "VCC_1V8", "VCC_3V3", "VCC_SCU_1V8", "VCC_SNVS"]
# Name of result dir
#VBresultsDir = M845STest2
resultsDir = iMX8QMCz
# pwrcycle after each test completion. If this is not done, correct teardown should be done to ensure consistent measurements
rebootAfterEachTest = True
# exitOnLauncherEnd = True: exit testlauncher when all tests are completed/exitOnLauncherEnd = False: stay connected to board at end of test for further debbug
#exitOnLauncherEnd = True
# create a zip file with results
zipresults = True

[SHELL]
#Path of files to copy on board
#cpdir = ../shell
#avoid copy at each reboot need to implement configure_board on first reboot only
cpdir = ../fake

# Send test report automatically by email to recipient list
[MAIL]
#tested with gmail, need to modify security, allow less secure apps: https://myaccount.google.com/lesssecureapps
smtp = smtp.gmail.com
# replace with your account password
#login = password
fromaddr = jerome.neanne@nxp.com
# comment toaddr to avoid sending mail
#toaddr = ['jerome.neanne@nxp.com', 'pascal.mareau@nxp.com', 'john.doe@nxp.com']
#toaddr = ['jerome.neanne@nxp.com']
